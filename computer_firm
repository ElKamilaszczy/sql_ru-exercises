--Schema description--
The database scheme consists of four tables:
Product(maker, model, type)
PC(code, model, speed, ram, hd, cd, price)
Laptop(code, model, speed, ram, hd, screen, price)
Printer(code, model, color, type, price)
The Product table contains data on the maker, model number, and type of product ('PC', 'Laptop', or 'Printer'). It is assumed that model numbers in the Product table are unique for all makers and product types. Each personal computer in the PC table is unambiguously identified by a unique code, and is additionally characterized by its model (foreign key referring to the Product table), processor speed (in MHz) – speed field, RAM capacity (in Mb) - ram, hard disk drive capacity (in Gb) – hd, CD-ROM speed (e.g, '4x') - cd, and its price. The Laptop table is similar to the PC table, except that instead of the CD-ROM speed, it contains the screen size (in inches) – screen. For each printer model in the Printer table, its output type (‘y’ for color and ‘n’ for monochrome) – color field, printing technology ('Laser', 'Jet', or 'Matrix') – type, and price are specified.

-- Exercise 41 --
/* For each maker who has models at least in one of the tables PC, Laptop, or Printer, determine the maximum price for his products.
Output: maker; if there are NULL values among the prices for the products of a given maker, display NULL for this maker, otherwise, the maximum price.
*/
with makers as(
select distinct p.maker from product p
where exists (select 1 from laptop l where l.model = p.model) or exists (select 1 from pc pc where pc.model = p.model)
or exists (select 1 from printer pr where pr.model = p.model)
)
, 

---
with maxes as
(select p.maker, isnull(max(l.price), -1) price from product p inner join laptop l on p.model = l.model
group by p.maker
union
select p.maker, isnull(max(pc.price), -1) price from product p inner join pc pc on pc.model = p.model
group by p.maker
union
select p.maker, isnull(max(pr.price), -1) price from product p inner join printer pr on pr.model = p.model
group by p.maker
)
select m.maker, case when max(m.price) = -1 then null else max(m.price) end as m_price from maxes m group by m.maker
